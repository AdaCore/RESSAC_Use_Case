<?xml version="1.0" encoding="UTF-8"?>
<scade_req:ReqProject xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:scade_req="http://www.esterel-technologies.com/scade/lifecycle/almgateway/scade_req/1" identifier="C:\Repository\microXAV\trunk\designXAV-sd\System\muXAV_v3\muXAV_v3.rqtf" text="muXAV_v3">
  <children xsi:type="scade_req:Document" identifier="muXAV Multi System Specification" text="muXAV Multi System Specification    Word"/>
  <children xsi:type="scade_req:Document" identifier="MMS Func Reqs allocated to SW" text="MMS Func Reqs allocated to SW    MMS FUNC Reqs">
    <children xsi:type="scade_req:Section" identifier="3." text="3. System Requirements Allocated to Software MMS" description="">
      <children xsi:type="scade_req:Section" identifier="3.1." text="3.1. MMS Functions (top-level)" description="">
        <children xsi:type="scade_req:Section" identifier="3.1.5." text="3.1.5. Functional Architecture" description="Include here a SCADE Architect diagram corresponding to: [MMS_ARCH_07] F_EL aborts F_PT When F_EL detects occurrence of hazardous situations not detected by F_PT, F_EL shall abort F_PT by sending the signal MissionAbort and take over the control to land the Air Vehicle. End_Req [MMS_ARCH_08] F_PT triggers F_EL When &lt;situation>, F_PT shall trigger F_EL Emergency Landing part by sending the signal EmergencyLanding to F_EL. End_Req Behavior Requirements [MMS_FUNC_09]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_FUNC_09]" text="[MMS_FUNC_09]" description="MMS Power On When MMS is powered on (Control Panel ON_OFF_PushButton), both F_PT and F_EL are activated. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.2." text="3.2. Function Payload Transport (F_PT)" description="">
        <children xsi:type="scade_req:Section" identifier="3.2.6." text="3.2.6. Behavior Requirements" description="[MMS_F_PT_FUNC_15] Detailed specification of F_PT is at sub-function level (F_MM, F_FC, F_EM, and F_CM).">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_FUNC_15]" text="[MMS_F_PT_FUNC_15]" description="When F_PT is activated all sub-functions shall be activated. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.3." text="3.3. Function Mission Management (F_MM)" description="">
        <children xsi:type="scade_req:Section" identifier="3.3.6." text="3.3.6. Behavior Requirements" description="[MMS_F_PT_F_MM_FUNC_18] [MMS_F_PT_F_MM_FUNC_19] [MMS_F_PT_F_MM_FUNC_20] [MMS_F_PT_F_MM_FUNC_21] [MMS_F_PT_F_MM_FUNC_22] [MMS_F_PT_F_MM_FUNC_23] [MMS_F_PT_F_MM_FUNC_24] [MMS_F_PT_F_MM_FUNC_25] [MMS_F_PT_F_MM_FUNC_26] OPERATING POINT UPDATES The operating point is the reference value F_FC regulates on at a given instant. When it regulates on an altitude value or on a speed value, these values are sent by F_MM to F_FC. When F_FC is in energy mode, the altitude or the speed reference value is computed by F_FC. [MMS_F_PT_F_MM_FUNC_27] [MMS_F_PT_F_MM_FUNC_28] VIABILITY COMPUTATION Viability analysis is energetic assessment of the mission's feasibility as defined at initial conditions. It is done before take-off to prevent launching the drone on unfeasible missions. This analysis is then periodically updated during flight (low rate, 0.1 Hz) as bad flight weather conditions may invalidate the standardized assumptions used at set-up phase. In-flight updates Viability computation is the same in-flight as before TakeOff, with distance equated to the remaining distance to fly, is repeated at periodic rate (f_viability = 0.1Hz) and with two other response surfaces (similar structures, but discount of a flat rate climb energy). [MMS_F_PT_F_MM_FUNC_29] [MMS_F_PT_F_MM_FUNC_30] What does initial validity mean? (speed and altitude are correlated but this is a physical property that the drone cannot perceive). [MMS_F_PT_F_MM_FUNC_31] [MMS_F_PT_F_MM_FUNC_32] [MMS_F_PT_F_MM_FUNC_33] MISSION TERMINATION [MMS_F_PT_F_MM_FUNC_34] [MMS_F_PT_F_MM_FUNC_35]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_18]" text="[MMS_F_PT_F_MM_FUNC_18]" description="Units: MM converts aeronautical units into S.I. GS and CP MMIs display values in aeronautical units (knots, nautical miles, feet etc.) but system and item implementation are based on IS units (m, kg, s). End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_19]" text="[MMS_F_PT_F_MM_FUNC_19]" description="Mission Setup activation When AV is powered ON, F_MM shall start the initialization phase. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_20]" text="[MMS_F_PT_F_MM_FUNC_20]" description="Mission Setup sequence The initialization phase shall perform sequentially: End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_21]" text="[MMS_F_PT_F_MM_FUNC_21]" description="Payload boarding A payload boarding sequence consists in: End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_22]" text="[MMS_F_PT_F_MM_FUNC_22]" description="Mission initialization: When Payload Boarding has completed successfully, Mission Set Up is started. Mission Set Up consists in: End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_23]" text="[MMS_F_PT_F_MM_FUNC_23]" description="Mission initialization: Alternative record mass (APP) seems over specified from System point of view When the bay is closed, the mass must be recorded from the CP's rotator or the USB key. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_24]" text="[MMS_F_PT_F_MM_FUNC_24]" description="Mission initialization: parameters input channels precedence. The rotators supersede any other means, unless value 99 is configured on the two wheels. In RP mode, GS supersedes the USB key, whereas in A mode the key supersedes any GS input. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_25]" text="[MMS_F_PT_F_MM_FUNC_25]" description="Mission initialization: completion When mission viability is computed: End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_26]" text="[MMS_F_PT_F_MM_FUNC_26]" description="Mission setup: completion When START PushButton from control panel or GO from Ground Station is received, if mission initialization has successfully completed, StartTakeOff is sent to F_FC to start the flight. This completes and terminates the Setup phase and the Air Vehicle enters the flight mode (starting with TakeOff phase). End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_27]" text="[MMS_F_PT_F_MM_FUNC_27]" description="While regulation mode is on altitude or speed, F_MM shall compute the operating point reference value and sends it to F_FC to regulate on. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_28]" text="[MMS_F_PT_F_MM_FUNC_28]" description="While regulation mode is on energy, F_FC shall compute the operating point reference value by itself to regulate on. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_29]" text="[MMS_F_PT_F_MM_FUNC_29]" description="Mission Viability: Drone Data for Needed Energy Four surrogate models are loaded and updated independently of the software. The models are tabulated functions or response surfaces that give the estimated needed energy from the mission parameters: These four PDIs are not mission dependent. They are drone dependent. They depend on the drone's empty mass, engines, and energy capacity. Each PDI is a table in the form: End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_30]" text="[MMS_F_PT_F_MM_FUNC_30]" description="Mission Viability: interpolation tables From the tables, F_MM shall select the 16 nearest neighbors and extract energy levels for each of these neighbors. F_MM shall compute the energy needed as an inverse distance based interpolation of the 16 neighboring values navigation parameter values and PayloadMass. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_31]" text="[MMS_F_PT_F_MM_FUNC_31]" description="Algorithm Derived? Mission Viability: needed energy computation We assume tables are sorted. The neighbors search can be sequential. From the 4 parameters, 2 neighbors in each dimension, a vector of 16 neighboring quadruplets is constructed. Compute the Euclidian distance disti between the selected drone parameters (mdrone, speedsetpoint, distancesetpoint, altitudesetpoint) to its 4 neighbors in viability table rowindex (mindex, sindex, dindex, aindex), for index in 1..16. Compute the needed energy from the 16 energy levels needed for each index with: If a disti is equal to 0 (within an epsilon tolerance) the energy at that point Ei = E(mi, si, di, ai) Otherwise compute interpolation with: Where This algorithm is documented in https://en.wikipedia.org/wiki/Inverse_distance_weighting. It is suggested unless other recommendations to use the algorithm parameter p value of 1 End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_32]" text="[MMS_F_PT_F_MM_FUNC_32]" description="Mission Viability: on-board available energy capacity Before TakeOff, comes directly from inputs? End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_33]" text="[MMS_F_PT_F_MM_FUNC_33]" description="Mission Viability: decision F_MM compares the result of needed energy level computation to the energy capacity available on board and makes the viability decision with 10% energy margin in RP mode, and 30% in A mode. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_34]" text="[MMS_F_PT_F_MM_FUNC_34]" description="F_MM monitors CurrentRange (received from F_FC). When (Distance - CurrentRange) &lt; GlideDistance (CurrentAltitude), F_MM shall activate landing. GlideDistance is a tabulated function that gives the ground distance needed to reach altitude zero from CurrentAltitude. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_FUNC_35]" text="[MMS_F_PT_F_MM_FUNC_35]" description="When F_MM activates landing, F_MM shall freeze any change on the operating point. Careful if mode is Energy, when the point is fixed by F_FC directly. Freezing must supersede F_FC operating point computation. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.4." text="3.4. Function Flight Control (F_FC)" description="">
        <children xsi:type="scade_req:Section" identifier="3.4.6." text="3.4.6. Behavior Requirements" description="[MMS_F_PT_F_FC_FUNC_41] SAFETY BREAKING When safety escapes are pending because of wind gusts, F_FC strives to keep the AV's body safe by stopping propulsion and preparing the brakes. This transition is necessary for physically effective mutual exclusion between the antagonist torque actions. Safety and/or lifetime of the drone is at stake: the engines are damaged when powered during braking action. There is a need to take into account inertia and delays on actuation lines (hydraulic and electrical, defined at increment 2). What does that mean: implementation needs to care about, or the mutual exclusion is designed to satisfy this need? [MMS_F_PT_F_FC_FUNC_42] [MMS_F_PT_F_FC_FUNC_43] [MMS_F_PT_F_FC_FUNC_44] Needs a derived software REQ here to propose an interpretation of &quot;fast&quot; safety escape. [MMS_F_PT_F_FC_FUNC_45] REFERENCE TRAJECTORY GENERATION The piecewise linear approach may need small increments of the set-point. The set-point is either an altitude value or a speed value. For landing, a distance objective is added to the zero-altitude objective. Landing must occur exactly at range completion. The reference trajectory is the discrete evolution curve of intermediate set-points generated and added between the set-points defined by µXAV's user. Reference trajectory generation is in charge of splitting the amplitude of the set-point updates into smaller steps, to facilitate prevention of overshoot. [MMS_F_PT_F_FC_FUNC_46] [MMS_F_PT_F_FC_FUNC_47] PROPULSION CONTROL In this version, the energy minimization option is not actually implemented as an optimal control algorithm (will be supplied later). When &quot;Energy&quot; option is active, the &quot;Altitude&quot; or &quot;Speed&quot; option is selected, depending on the respective energy cost induced by the two pre-set Altitude and Speed values. The selected option is the less energetically demanding one. [MMS_F_PT_F_FC_FUNC_48] [MMS_F_PT_F_FC_FUNC_49] [MMS_F_PT_F_FC_FUNC_50] [MMS_F_PT_F_FC_FUNC_51] [MMS_F_PT_F_FC_FUNC_52] [MMS_F_PT_F_FC_FUNC_53] [MMS_F_PT_F_FC_FUNC_54]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_41]" text="[MMS_F_PT_F_FC_FUNC_41]" description="Constants for flight control safety envelope Constant Name|2 Corps&#x9;Unit|3 Corps&#x9;Value qdot_minCl|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD qdot_maxCl|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD q_maxCl|2 Corps&#x9;Angle|3 Corps&#x9;TBD qdot_minCr|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD qdot_maxCr|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD q_minCr|2 Corps&#x9;Angle|3 Corps&#x9;TBD pdot_maxCr|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD qdot_minDs|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD qdot_maxDs|2 Corps&#x9;Angle.s-1|3 Corps&#x9;TBD q_maxDs|2 Corps&#x9;Angle|3 Corps&#x9;TBD End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_42]" text="[MMS_F_PT_F_FC_FUNC_42]" description="Propulsion Braking temporal separation The parameter Name|2 Normal&#x9;Unit|3 Normal&#x9;Value CommutationDuration|2 Normal&#x9;s|3 Normal&#x9;TBD is defined to separate the incompatible propulsion and breaking actuation phases. The numerical value of CommutationDuration is defined at model level. What does that mean? The Modelica model is used to characterize this value? End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_43]" text="[MMS_F_PT_F_FC_FUNC_43]" description="Propulsion Braking commutation The gain scheduling policy applies to propulsion and braking control. There is a gain table swap at each Propulsion ↔ Braking swap. That seems to indicate there are actually 6 Gain tables, not three as said earlier... End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_44]" text="[MMS_F_PT_F_FC_FUNC_44]" description="Safety braking activation In case of persistency in the hazardous region more than HazardDuration consecutive seconds or in case of fast evolution to a safety escape, braking is activated after propulsion has been stopped for CommutationDuration seconds. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_45]" text="[MMS_F_PT_F_FC_FUNC_45]" description="Braking is stopped when AV's dynamics re-enters the safety domain. The same CommutationDuration timeout is applied before resuming propulsion to cope with physical latencies in both ways. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_46]" text="[MMS_F_PT_F_FC_FUNC_46]" description="Intermediate set points Instead of giving the true set-point on altitude or speed to Propulsion Control, it gives half of the change amplitude, i.e. the mid-value between the current state and the set-point. IntermediateSetPoint_forX(t) = ½ * (CurrentX(t)+ SetPoint_X(t)) where X stands for Speed or Altitude. It can be computed at each cycle. Slower rates are possible, but not too slow. When the current intermediate set-point is reached the next one is computed, and so on until the user-defined set-point is reached. The propulsion and braking controllers use IntermediateSetPoint_X instead of SetPoint_X. IntermediateSetPoint_X tends to SetPoint_X over time (zero-like aspects to be addressed when convergence). End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_47]" text="[MMS_F_PT_F_FC_FUNC_47]" description="Reference trajectory reset This module is reset by any navigation parameter change. Meaning? (no sign of memory there?) End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_48]" text="[MMS_F_PT_F_FC_FUNC_48]" description="Energy is Altitude or Speed To determine which to select, two systems of two equations in (pdotA, qA), (pdotS, qS) are to be solved. First: • g/L= (pdotA)2 . cos(qA) • Altitude = L.(1 - cos(qA)) Second : • g/L= (pdotS)2 . cos(qS) • Speed= pdotS.L.sin(qS) If pdotA &lt; pdotS, option &quot;Altitude&quot; shall be selected otherwise &quot;Speed&quot; shall be selected. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_49]" text="[MMS_F_PT_F_FC_FUNC_49]" description="Error value for PID regulation The navigation option conditions the computation of variable error(t) used by the PID algorithms shall be computed as: • While in Speed mode, error(t) = Speed(t) - OperatingPoint.Speed(t) • While in Altitude mode, error(t) = Altitude(t) - OperatingPoint.Altitude(t) End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_50]" text="[MMS_F_PT_F_FC_FUNC_50]" description="The PID controller computes PropulsionTorque(t) as a sum of three torques, each one dependent on error(t), but on different time horizons: • instantaneous error at time t: error(t), • cumulative past error during the last Ti seconds: o integral_error(t)= • error variation at time t: o derivative_error(t)= Hence the three letters P, I, D. PropulsionTorque(t) =&#x9;Kp(t)*error(t) + Ki(t)*integral_error(t) + Kd(t)*derivative_error(t). with Kp(t), Ki(t), and Kd(t) being the scheduled gains for current state (CurrentSpeed(t), CurrentAltitude(t)). The coefficients Ki also depend on phase, and whether we are in propulsion or braking... End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_51]" text="[MMS_F_PT_F_FC_FUNC_51]" description="Propulsion PID coefficients determination Like in viability computation, CurrentSpeed(t), CurrentAltitude(t) define the current position of AV for selecting its nearest neighbors in the 2D FlightDomainMesh. The distances to the 4 nearest neighbors (d1(t), d2(t), d3(t), d4(t)) are computed, the 4 weights wi(t)=1/di(t) i = 1..4, are computed, and finally the four neighbors' gain triplets are extracted (limit cases di(t)=0 to be properly handled). Then, Kp(t), Ki(t), and Kd(t) are the wi(t)-weighted averages of the 4 neighbors' corresponding coefficients. COMPUTATION TO BE EXPLAINED TO THE END End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_52]" text="[MMS_F_PT_F_FC_FUNC_52]" description="Braking PID coefficients determination The algorithm is a simpler version of the propulsion one: the Speed/Altitude option has no longer influence. error(t) is always computed from the speed. Braking is an emergency phase triggered to quickly pull back the AV's dynamics in the safety region. It consists in sharp speed decrease (short duration, drop of pdot and q). A constant speed level, named RecoverySpeed, is used as set point. Name|2 Normal&#x9;Unit|3 Normal&#x9;Value RecoverySpeed|2 Normal&#x9;m/s|3 Normal&#x9;TBD COMPUTATION TO BE EXPLAINED TO THE END End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_53]" text="[MMS_F_PT_F_FC_FUNC_53]" description="Air vehicle state vector The AV's state vector is defined by: • Speed(t) = L.sin(q(t)).pdot(t) • Altitude(t) = L.(1 - cos(q(t))) • Distance(t) = • Mass(t) = M0 + Mpayload + Micing(t), where Micing is an unknown perturbation to be estimated, and Mpayload is given by the two rotators of the control panel. NO, mass has been decided on by input channels priority resolution at setup time. Micing(t) is neglected in increment 1. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_FUNC_54]" text="[MMS_F_PT_F_FC_FUNC_54]" description="AV mechanical parameters The AV's mechanical body is dimensioned by means of the following parameters: Name|2 Normal&#x9;Unit|3 Normal&#x9;Value J0|2 Normal&#x9;kg.m2|3 Normal&#x9;TBD L|2 Normal&#x9;m|3 Normal&#x9;TBD M0|2 Normal&#x9;kg|3 Normal&#x9;TBD The parameter values will be supplied with the layer 0 model and the associated simulation scenarios conformant to [3]. Where is J0 used? End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.5." text="3.5. Function Energy Management (F_EM)" description="">
        <children xsi:type="scade_req:Section" identifier="3.5.6." text="3.5.6. Behavior Requirements" description="Parameters: •&#x9;PrimaryInitialCapacity (J) •&#x9;SecondaryInitialCapacity (J) At t=0, start of mission: InitialCapacity=PrimaryInitialCapacity + SecondaryInitialCapacity. [MMS_F_PT_F_EM_FUNC_57] [MMS_F_PT_F_EM_FUNC_58] [MMS_F_PT_F_EM_FUNC_59] [MMS_F_PT_F_EM_FUNC_60]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_EM_FUNC_57]" text="[MMS_F_PT_F_EM_FUNC_57]" description="Dispended Energy estimation DispendedEnergy(t)= PropulsionEnergy(t) + BrakingEnergy(t). PropulsionEnergy(t)= BrakingEnergy(t)= End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_EM_FUNC_58]" text="[MMS_F_PT_F_EM_FUNC_58]" description="Remaining Primary Energy left While (PrimarySource(t) > 0) PrimaryEnergyLeft(t)=PrimaryInitialCapacity-DispendedEnergy(t) PrimarySource(t)=100*(PrimaryInitialCapacity-DispendedEnergy)/ PrimaryInitialCapacity. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_EM_FUNC_59]" text="[MMS_F_PT_F_EM_FUNC_59]" description="Remaining Primary Energy left When (PrimarySource(t) &lt;= 0) PrimarySource(t)= 0 and Primary Source frozen End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_EM_FUNC_60]" text="[MMS_F_PT_F_EM_FUNC_60]" description="Remaining Secondary Energy left When (PrimarySource(t) = 0) SecondaryEnergyLeft(t)=SecondaryInitialCapacity - DispendedEnergy(t). SecondarySource(t)= 100*(SecondaryInitialCapacity - DispendedEnergy)/ SecondaryInitialCapacity. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.6." text="3.6. Function Communication Management (F_CM)" description="For increment 1, F_CM has two roles: 1.&#x9;It manages possible inconsistencies between GS-supplied and AV-supplied navigation parameters, 2.&#x9;It dispatches the software inputs to the functions, 3.&#x9;It collects the functions' outputs and dispatches them to software outputs">
        <children xsi:type="scade_req:Section" identifier="3.6.6." text="3.6.6. Behavior Requirements" description="[MMS_F_PT_F_CM_FUNC_63]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_CM_FUNC_63]" text="[MMS_F_PT_F_CM_FUNC_63]" description="Navigation Modes/Options/Parameters set up. When the two channels are active and provide conflicting values for the same entity, the following selection logic is applied: 1. In case of conflict on the navigation mode, CP prevails over GS, 2. In case of RP mode, GS prevails over CP, 3. In case of A mode, CP prevails over GS. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.7." text="3.7. Function Emergency Landing (F_EL)" description="F_EL is fully defined at increment 1. It has two roles: •&#x9;Performing the hard landings activated by F_MM, •&#x9;Monitoring the safety escapes not diagnosed by F_MM which lead to self-activation of hard landing Hard landing is named so because it is brake only control. It may lead to terrain contact at excessive speed with ensued drone damage. Essentially F_EL is a PID controller without gain scheduling.">
        <children xsi:type="scade_req:Section" identifier="3.7.6." text="3.7.6. Behavior Requirements" description="[MMS_F_EL_FUNC_66]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_EL_FUNC_66]" text="[MMS_F_EL_FUNC_66]" description="A linear reference trajectory of q and qdot are defined from q and qdot at F_EL activation time, down-to q=0, qdot=0 at grounding time. These trajectories are defined with safety margins wt. descent safety envelope. (Safety envelope max gains xxxDs parameters of § 6.7.3.2 table. (To be updated with a requirement reference). End_Req"/>
        </children>
      </children>
    </children>
  </children>
  <children xsi:type="scade_req:Document" identifier="MMS Intf Reqs allocated to SW" text="MMS Intf Reqs allocated to SW    MMS INTF Reqs">
    <children xsi:type="scade_req:Section" identifier="3." text="3. System Requirements Allocated to Software MMS" description="">
      <children xsi:type="scade_req:Section" identifier="3.1." text="3.1. MMS Functions (top-level)" description="">
        <children xsi:type="scade_req:Section" identifier="3.1.2." text="3.1.2. Interface Requirements" description="[MMS_INTF_01] [MMS_INTF_04] [MMS_INTF_02] [MMS_INTF_03] [MMS_INTF_05] [MMS_INTF_06]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_01]" text="[MMS_INTF_01]" description="Inputs from Ground Station Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment GS_NavigationParameters|2 Corps&#x9;Distance  [1:1:100] (n.m)|2 Corps&#x9;Speed     [1:1:250] (kt)|2 Corps&#x9;Altitude   [-500, 1, 3000] (ft)|3 Corps&#x9;Only one of Speed or Altitude drives navigation, according to NavigationOption GS_NavigationControlMode|2 Corps&#x9;{'RP', 'A'}|3 Corps&#x9;Enumerated type RP=Remotely Piloted A=Autonomous GS_NavigationRegulOption|2 Corps&#x9;{'SPEED', 'ALTITUDE', 'ENERGY'}|3 Corps&#x9;Enumerated type GS_GO|2 Corps&#x9;event|3 Corps GS_EmergencyLandingCmd|2 Corps&#x9;event|3 Corps&#x9;MANQUE DANS LE MODELE|3 Corps&#x9;Manque dans la description spec multi-systèmes End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_04]" text="[MMS_INTF_04]" description="Outputs to Ground Station Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment CP_Switches|2 Corps&#x9; Power: Boolean;|2 Corps&#x9; Mode: {'RP','A'};|2 Corps&#x9; Bay: {'OPEN','CLOSED'}|2 Corps&#x9; START: Boolean;|2 Corps&#x9; Rotactor1: [1:1:9] (kg)|2 Corps&#x9; Rotactor2: [1:1:9] (kg)|3 Corps CP_Displays|2 Corps&#x9; READY: Boolean;|2 Corps&#x9; CANCELLED: Boolean;|2 Corps&#x9; COMPLETE: Boolean;|2 Corps&#x9; ABORTED: Boolean;|2 Corps&#x9; PrimarySource [1:1:100] (%)|2 Corps&#x9; SecondarySource [1:1:100] (%)|3 Corps&#x9;|3 Corps&#x9;Capacities are relative to full charge PropulsionEnergy|2 Corps&#x9;PrimarySourceCapacity [1:1:99999] (J)|2 Corps&#x9;SecondarySourceCapacity [1:1:9999] (J)|3 Corps&#x9;Capacities are absolute in Joule|3 Corps&#x9;FROM ?|3 Corps&#x9;GitHub Issue etc? End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_02]" text="[MMS_INTF_02]" description="Inputs from Control Panel Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment ON_OFF_PushButton|2 Corps&#x9;event|3 Corps&#x9;Power on, to boot all systems START_PushButton|2 Corps&#x9;event|3 Corps ModeSwitch|2 Corps&#x9;{'A','RP'}|3 Corps&#x9;Two stable states|3 Corps&#x9;A=Autonomous, RP=Remotely Piloted BaySwitch|2 Corps&#x9;{'OPEN','CLOSED'}|3 Corps&#x9;Two stable states PayloadMass|2 Corps&#x9;integer|3 Corps&#x9;ROTACTORS ONLY, from CP (GitHub Issue #14) USB_Key|2 Corps&#x9;Distance [1:1:100] (n.m)|2 Corps&#x9;Speed [1:1:250] (kt)|2 Corps&#x9;Altitude [-500, 3000] (ft)|3 Corps&#x9;USB Key may be present or not End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_03]" text="[MMS_INTF_03]" description="Input Physical Parameters Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment p|2 Corps&#x9;float|3 Corps&#x9;Drives distance pdot|2 Corps&#x9;float|3 Corps&#x9;Drives speed q|2 Corps&#x9;float|3 Corps&#x9;Drives altitude and pitch End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_05]" text="[MMS_INTF_05]" description="Outputs to Control Panel Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment MissionCANCELLED|2 Corps&#x9;true/false|3 Corps MissionCOMPLETE|2 Corps&#x9;true/false|3 Corps MissionABORTED|2 Corps&#x9;true/false|3 Corps PrimarySource|2 Corps&#x9;[1:1:100] (%)|3 Corps SecondarySource|2 Corps&#x9;[1:1:100] (%)|3 Corps Missing READY from MM -> CM to Control panel End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_06]" text="[MMS_INTF_06]" description="Output Physical Parameters Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment PropulsionTorque|2 Corps&#x9;[-10e-6:0.0001:+10e-6] (N.m)|3 Corps&#x9;When Torque > minTorque , set to zero otherwise BrakingTorque|2 Corps&#x9;[-10e-6:0.0001:+10e-6] (N.m)|3 Corps&#x9;When Torque &lt; -minTorque, set to zero otherwise. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.2." text="3.2. Function Payload Transport (F_PT)" description="">
        <children xsi:type="scade_req:Section" identifier="3.2.2." text="3.2.2. Interface Requirements" description="[MMS_F_PT_INTF_10]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_INTF_10]" text="[MMS_F_PT_INTF_10]" description="F_PT has all MMS inputs F_PT uses all MMS input interface described in [MMS_INTF_01] to [MMS_INTF_03]">
            <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_01]" text="[MMS_INTF_01]" description="[MMS_F_PT_INTF_11]">
              <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_03]" text="[MMS_INTF_03]" description="End_Req"/>
              <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_INTF_11]" text="[MMS_F_PT_INTF_11]" description="F_PT has all MMS outputs F_PT uses all MMS output interface described in [MMS_INTF_04] to [MMS_INTF_06]">
                <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_04]" text="[MMS_INTF_04]" description="[MMS_F_PT_INTF_12] [MMS_F_PT_INTF_13]">
                  <children xsi:type="scade_req:Requirement" identifier="[MMS_INTF_06]" text="[MMS_INTF_06]" description="End_Req"/>
                  <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_INTF_12]" text="[MMS_F_PT_INTF_12]" description="F_PT input MissionAbort from F_EL Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment MissionAbort|2 Corps&#x9;true/false|3 Corps&#x9;Signal sent by F_EL when it diagnoses that F_PT does not detect dangerous behaviour of the AV End_Req"/>
                  <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_INTF_13]" text="[MMS_F_PT_INTF_13]" description="F_PT output EmergencyLanding to F_EL Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment EmergencyLanding|2 Corps&#x9;true/false|3 Corps&#x9;True when F_PT decides to abort the mission. Leads to soft landing when enough electrical energy is still available, to hard landing otherwise End_Req"/>
                </children>
              </children>
            </children>
          </children>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.3." text="3.3. Function Mission Management (F_MM)" description="">
        <children xsi:type="scade_req:Section" identifier="3.3.2." text="3.3.2. Interface Requirements" description="[MMS_F_PT_F_MM_INTF_16] [MMS_F_PT_F_MM_INTF_17]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_INTF_16]" text="[MMS_F_PT_F_MM_INTF_16]" description="F_MM inputs Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment NavigationParameters|2 Corps&#x9;Distance  [1:1:100] (n.m)|2 Corps&#x9;Speed     [1:1:250] (kt)|2 Corps&#x9;Altitude   [-500: 1: 3000] (ft)|3 Corps&#x9;From F_CM NavigationMode|2 Corps&#x9;{'RP','A'}|3 Corps&#x9;From F_CM NavigationOption|2 Corps&#x9;{'SPEED','ENERGY'}|3 Corps&#x9;From F_CM GO|2 Corps&#x9;event|3 Corps&#x9;From F_CM MissionAbort|2 Corps&#x9;event|3 Corps&#x9;From F_FC or F_EL ON/OFF_PushButton|2 Corps&#x9;event|3 Corps&#x9;From F_CM START_PushButton|2 Corps&#x9;event|3 Corps&#x9;From F_CM ModeSwitch|2 Corps&#x9;{'A','RP'}|3 Corps&#x9;From F_CM BaySwitch|2 Corps&#x9;  {'OPEN','CLOSED'}|3 Corps&#x9;From F_CM PayloadMass|2 Corps&#x9;[1:0.1:5kg]|3 Corps&#x9;From F_CM USB_Key|2 Corps&#x9;Distance [1:1:100] (n.m)|2 Corps&#x9;Speed [1:1:250] (kt)|2 Corps&#x9;Altitude [-500:1:3000] (ft)|3 Corps&#x9;From F_CM EstimatedTotalMass|2 Corps&#x9;[5,10]kg|3 Corps&#x9;From F_FC: instantaneous empty AV mass + payload mass + icing mass CurrentRange|2 Corps&#x9;[1:1:1000000](m)|3 Corps&#x9;From F_FC: continuously computed estimated ground distance flown since take-off CurrentSpeed|2 Corps&#x9;[1:1:500] (km/h)|2 Corps&#x9;|3 Corps&#x9;From F_FC: continuously computed instantaneous air speed CurrentAltitude|2 Corps&#x9;[-200:1:1000] (m)|3 Corps&#x9;From F_FC: continuously computed instantaneous altitude EnergyLevel|2 Corps&#x9;[0:1:500] (kJ)|3 Corps&#x9;From F_EM: current energy storage Need additional flight phase from F_FC ? End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_MM_INTF_17]" text="[MMS_F_PT_F_MM_INTF_17]" description="F_MM outputs Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment MissionCANCELLED|2 Corps&#x9;true/false|3 Corps&#x9;To F_CM MissionCOMPLETE|2 Corps&#x9;true/false|3 Corps&#x9;To F_CM MissionABORTED|2 Corps&#x9;true/false|3 Corps&#x9;To F_CM EmergencyLanding|2 Corps&#x9;event|3 Corps&#x9;To F_EL: diagnosed catastrophic situation StartTakeOff|2 Corps&#x9;event|3 Corps&#x9;To F_FC StartLanding|2 Corps&#x9;event|3 Corps&#x9;To F_FC OperatingPoint|2 Corps&#x9;Altitude and Speed |3 Corps&#x9;To F_FC. (same ranges as the ones at interface) OperatingMode|2 Corps&#x9;value in {'SPEED','ALTITUDE','ENERGY'}|3 Corps&#x9;To F_FC MissionRange|2 Corps&#x9;Same range as the Distance mission parameter|3 Corps&#x9;To F_FC used to trigger landing when the mission range is within reach Missing READY End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.4." text="3.4. Function Flight Control (F_FC)" description="">
        <children xsi:type="scade_req:Section" identifier="3.4.2." text="3.4.2. Interface Requirements" description="[MMS_F_PT_F_FC_INTF_36] [MMS_F_PT_F_FC_INTF_37] [MMS_F_PT_F_FC_INTF_38] [MMS_F_PT_F_FC_INTF_39]">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_INTF_36]" text="[MMS_F_PT_F_FC_INTF_36]" description="F_FC physical parameter inputs Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment P|2 Corps&#x9;float|3 Corps&#x9;Drives distance Pdot|2 Corps&#x9;float|3 Corps&#x9;Drives speed Q|2 Corps&#x9;float|3 Corps&#x9;Drives altitude and pitch End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_INTF_37]" text="[MMS_F_PT_F_FC_INTF_37]" description="F_FC navigation set up Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment OperatingPoint|2 Corps&#x9;Altitude and Speed |3 Corps OperatingMode|2 Corps&#x9;value in {'SPEED', 'ALTITUDE', 'ENERGY'}|3 Corps&#x9;OPERATINGREGULOPTION MissionRange|2 Corps&#x9;Same range as the Distance mission parameter|3 Corps End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_INTF_38]" text="[MMS_F_PT_F_FC_INTF_38]" description="F_FC outputs Flow Name|2 Corps&#x9;Content|3 Corps&#x9;Comment EstimatedTotalMass|2 Corps&#x9;Altitude and Speed |3 Corps CurrentRange|2 Corps&#x9;value in {'SPEED', 'ALTITUDE', 'ENERGY'}|3 Corps CurrentSpeed|2 Corps&#x9;Same range as the Distance mission parameter|3 Corps CurrentAltitude|2 Corps&#x9;[-200:1:1000] (m)|3 Corps PropulsionTorque|2 Corps&#x9;[0:0.1:100000] (N.m)|3 Corps&#x9;To AV BrakingTorque|2 Corps&#x9;[0:0.1:100000] (N.m)|3 Corps&#x9;To AV End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_F_FC_INTF_39]" text="[MMS_F_PT_F_FC_INTF_39]" description="Similar to F_MM's tabulated viability functions, three association tables, one per phase (climb, cruise, descent), give the means to select the appropriate PID gain triple (Kd, Kp, Ki) applicable to AV's current sate vector. The three tables are named: • ClimbGains • CruiseGains • DescentGains They all have the same three indexing parameters: (viability energy tables seem to have distance as additional parameter) • Mass • Altitude • Speed They are used to compute the interpolated (Kd, Kp, Ki) triple from the triples of the nearest neighbours to the current state. End_Req"/>
        </children>
      </children>
    </children>
  </children>
  <children xsi:type="scade_req:Document" identifier="MMS Arch Reqs allocated to SW" text="MMS Arch Reqs allocated to SW    MMS ARCH Reqs">
    <children xsi:type="scade_req:Section" identifier="3." text="3. System Requirements Allocated to Software MMS" description="">
      <children xsi:type="scade_req:Section" identifier="3.1." text="3.1. MMS Functions (top-level)" description="">
        <children xsi:type="scade_req:Section" identifier="3.1.5." text="3.1.5. Functional Architecture" description="Include here a SCADE Architect diagram corresponding to: [MMS_ARCH_07] [MMS_ARCH_08] Behavior Requirements [MMS_FUNC_09] MMS Power On When MMS is powered on (Control Panel ON_OFF_PushButton), both F_PT and F_EL are activated. End_Req">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_ARCH_07]" text="[MMS_ARCH_07]" description="F_EL aborts F_PT When F_EL detects occurrence of hazardous situations not detected by F_PT, F_EL shall abort F_PT by sending the signal MissionAbort and take over the control to land the Air Vehicle. End_Req"/>
          <children xsi:type="scade_req:Requirement" identifier="[MMS_ARCH_08]" text="[MMS_ARCH_08]" description="F_PT triggers F_EL When &lt;situation>, F_PT shall trigger F_EL Emergency Landing part by sending the signal EmergencyLanding to F_EL. End_Req"/>
        </children>
      </children>
      <children xsi:type="scade_req:Section" identifier="3.2." text="3.2. Function Payload Transport (F_PT)" description="">
        <children xsi:type="scade_req:Section" identifier="3.2.5." text="3.2.5. Functional Architecture" description="[MMS_F_PT_ARCH_14] Figure 2: Functional decomposition and information flows of function Payload Transport (F_PT)">
          <children xsi:type="scade_req:Requirement" identifier="[MMS_F_PT_ARCH_14]" text="[MMS_F_PT_ARCH_14]" description="F_PT sub-functions communications Sub functions communications illustrated on the following figure should be detailed in this section. End_Req">
            <children xsi:type="scade_req:IncomingReference" identifier="platform:/resource/muXAV_v3/SCADE%20Architect%20Model%20Files/muXAV_v3.uml#_MeJLgM-KEeeGTvO4k61BdA" text="OF_PT" type="Covering:trace" local="true"/>
          </children>
        </children>
      </children>
    </children>
  </children>
</scade_req:ReqProject>
